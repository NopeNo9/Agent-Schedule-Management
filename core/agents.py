import re
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Union
from utils.time_patterns import (
            get_time_patterns,
            parse_weekday,
            parse_weekday_this_week,
            parse_weekday_next_week,
            parse_time_period_day,
            parse_time_period_weekday,
            parse_after_days,
            parse_after_weeks,
            parse_after_months
        )
from utils.task_categories import task_categories

class ScheduleAdvisor:
    def __init__(self):
        self.current_time = datetime.now()
        self.business_hours = (8, 17)
        self.lunch_time = (12, 13)
        self.weekday_map = {
            'ch·ªß nh·∫≠t': 6, 'cn': 6, 'ch·ªßnh·∫≠t': 6,
            'th·ª© hai': 0, 't2': 0, 'th·ª© 2': 0, 'th·ª©hai': 0, 'th·ª©2': 0,
            'th·ª© ba': 1, 't3': 1, 'th·ª© 3': 1, 'th·ª©ba': 1, 'th·ª©3': 1,
            'th·ª© t∆∞': 2, 't4': 2, 'th·ª© 4': 2, 'th·ª©t∆∞': 2, 'th·ª©4': 2,
            'th·ª© nƒÉm': 3, 't5': 3, 'th·ª© 5': 3, 'th·ª©nƒÉm': 3, 'th·ª©5': 3,
            'th·ª© s√°u': 4, 't6': 4, 'th·ª© 6': 4, 'th·ª©s√°u': 4, 'th·ª©6': 4,
            'th·ª© b·∫£y': 5, 't7': 5, 'th·ª© 7': 5, 'th·ª©b·∫£y': 5, 'th·ª©7': 5
        }
        self.time_patterns = [
            # ∆Øu ti√™n nh·∫≠n di·ªán 'th·ª© ... (tu·∫ßn ...) (l√∫c|v√†o) ...h' v·ªõi kho·∫£ng tr·∫Øng linh ho·∫°t
            (r"(th·ª©\s*[2-7]|ch·ªß\s*nh·∫≠t|cn|t[2-7])\s*(?:tu·∫ßn\s*n√†y|tu·∫ßn\s*sau)?\s*(?:l√∫c|v√†o)?\s*(\d{1,2})(?:h|:)?(\d{2})?", lambda m: self._parse_weekday_time(m)),
            (r"(\d{1,2})(?:h|:)?(\d{2})?\s*(th·ª©\s*[2-7]|ch·ªß\s*nh·∫≠t|cn|t[2-7])\s*tu·∫ßn\s*n√†y", lambda m: self._parse_time_weekday_this_week(m)),
            (r"(\d{1,2})(?:h|:)?(\d{2})?\s*(th·ª©\s*[2-7]|ch·ªß\s*nh·∫≠t|cn|t[2-7])\s*tu·∫ßn\s*sau", lambda m: self._parse_time_weekday_next_week(m)),
            (r"(\d{1,2})(?:h|:)?(\d{2})?\s*(th·ª©\s*[2-7]|ch·ªß\s*nh·∫≠t|cn|t[2-7])", lambda m: self._parse_time_weekday(m)),
            (r"(th·ª©\s*[2-7]|ch·ªß\s*nh·∫≠t|cn|t[2-7])\s*tu·∫ßn\s*n√†y", lambda m: parse_weekday_this_week(m, self.current_time, self.weekday_map)),
            (r"(th·ª©\s*[2-7]|ch·ªß\s*nh·∫≠t|cn|t[2-7])\s*tu·∫ßn\s*sau", lambda m: parse_weekday_next_week(m, self.current_time, self.weekday_map)),
            (r"(th·ª©\s*[2-7]|ch·ªß\s*nh·∫≠t|cn|t[2-7])", lambda m: parse_weekday(m, self.current_time, self.weekday_map)),
            (r"(s√°ng|chi·ªÅu|t·ªëi)\s*(h√¥m\s*nay|mai|ng√†y\s*kia)", lambda m: parse_time_period_day(m, self.current_time)),
            (r"(s√°ng|chi·ªÅu|t·ªëi)\s*(th·ª©\s*[2-7]|ch·ªß\s*nh·∫≠t)", lambda m: parse_time_period_weekday(m, self.current_time, self.weekday_map)),
            (r"sau\s*(\d+)\s*ng√†y", lambda m: parse_after_days(m, self.current_time)),
            (r"sau\s*(\d+)\s*tu·∫ßn", lambda m: parse_after_weeks(m, self.current_time)),
            (r"sau\s*(\d+)\s*th√°ng", lambda m: parse_after_months(m, self.current_time)),
        ] + get_time_patterns(self.current_time)
        
        self.task_categories = task_categories

    def _parse_weekday_time(self, match):
        """Parse pattern: th·ª© 2 l√∫c 14h, th·ª© 7 l√∫c 12h"""
        weekday_str = match.group(1).lower().replace(' ', '')
        hour = int(match.group(2)) if match.group(2) else 8
        minute = int(match.group(3)) if match.group(3) else 0
        target_weekday = self.weekday_map.get(weekday_str)
        if target_weekday is None:
            return None
        days_ahead = target_weekday - self.current_time.weekday()
        if days_ahead < 0:
            # N·∫øu ng√†y ƒë√£ qua trong tu·∫ßn n√†y th√¨ hi·ªÉu l√† tu·∫ßn sau
            days_ahead += 7
        target_date = self.current_time + timedelta(days=days_ahead)
        return target_date.replace(hour=hour, minute=minute, second=0, microsecond=0)

    def _parse_time_weekday_this_week(self, match):
        """Parse pattern: 12h th·ª© 7 tu·∫ßn n√†y"""
        hour = int(match.group(1))
        minute = int(match.group(2)) if match.group(2) else 0
        weekday_str = match.group(3).lower().replace(' ', '')
        
        target_weekday = self.weekday_map.get(weekday_str)
        if target_weekday is None:
            return None
            
        days_ahead = target_weekday - self.current_time.weekday()
        if days_ahead < 0:
            days_ahead += 7
            
        target_date = self.current_time + timedelta(days=days_ahead)
        return target_date.replace(hour=hour, minute=minute, second=0, microsecond=0)

    def _parse_time_weekday_next_week(self, match):
        """Parse pattern: 12h th·ª© 7 tu·∫ßn sau"""
        hour = int(match.group(1))
        minute = int(match.group(2)) if match.group(2) else 0
        weekday_str = match.group(3).lower().replace(' ', '')
        
        target_weekday = self.weekday_map.get(weekday_str)
        if target_weekday is None:
            return None
            
        days_ahead = target_weekday - self.current_time.weekday() + 7
        target_date = self.current_time + timedelta(days=days_ahead)
        return target_date.replace(hour=hour, minute=minute, second=0, microsecond=0)

    def _parse_time_weekday(self, match):
        """Parse pattern: 12h th·ª© 7"""
        hour = int(match.group(1))
        minute = int(match.group(2)) if match.group(2) else 0
        weekday_str = match.group(3).lower().replace(' ', '')
        
        target_weekday = self.weekday_map.get(weekday_str)
        if target_weekday is None:
            return None
            
        days_ahead = target_weekday - self.current_time.weekday()
        if days_ahead <= 0:
            days_ahead += 7
            
        target_date = self.current_time + timedelta(days=days_ahead)
        return target_date.replace(hour=hour, minute=minute, second=0, microsecond=0)

    def _extract_time(self, text: str) -> Optional[datetime]:
        text_lower = text.lower()
        for pattern, parser in self.time_patterns:
            match = re.search(pattern, text_lower)
            if match:
                try:
                    result = parser(match)
                    if result:
                        # N·∫øu k·∫øt qu·∫£ l√† qu√° kh·ª© th√¨ kh√¥ng tr·∫£ v·ªÅ
                        if result > self.current_time:
                            return result
                        else:
                            return None
                except Exception:
                    continue
        return None

    def _categorize_task(self, text: str) -> Dict[str, Union[str, int, Tuple[int, int]]]:
        text_lower = text.lower()
        for category, info in self.task_categories.items():
            if any(keyword in text_lower for keyword in info['keywords']):
                return info
        return {
            'duration': 60,
            'priority': 'B√¨nh th∆∞·ªùng',
            'best_time': (9, 17)
        }

    def _analyze_priority(self, text: str) -> str:
        text_lower = text.lower()
        high_priority_keywords = ['g·∫•p', 'urgent', 'quan tr·ªçng', 'important', 'kh·∫©n c·∫•p', 'deadline', 'h·∫°n ch√≥t']
        low_priority_keywords = ['kh√¥ng g·∫•p', 'c√≥ th·ªÉ', 'n·∫øu ƒë∆∞·ª£c', 't√πy √Ω']
        if any(keyword in text_lower for keyword in high_priority_keywords):
            return 'Cao'
        elif any(keyword in text_lower for keyword in low_priority_keywords):
            return 'Th·∫•p'
        else:
            return 'B√¨nh th∆∞·ªùng'

    def _validate_business_time(self, suggested_time: datetime) -> Tuple[datetime, List[str]]:
        warnings = []
        adjusted_time = suggested_time
        if suggested_time.weekday() >= 5:
            warnings.append("‚ö†Ô∏è Th·ªùi gian r∆°i v√†o cu·ªëi tu·∫ßn")
        hour = suggested_time.hour
        if hour < self.business_hours[0]:
            warnings.append("‚ö†Ô∏è Tr∆∞·ªõc gi·ªù l√†m vi·ªác, g·ª£i √Ω ƒëi·ªÅu ch·ªânh v·ªÅ 8h")
            adjusted_time = suggested_time.replace(hour=8, minute=0)
        elif hour > self.business_hours[1]:
            warnings.append("‚ö†Ô∏è Sau gi·ªù l√†m vi·ªác, g·ª£i √Ω ƒëi·ªÅu ch·ªânh v·ªÅ 9h ng√†y h√¥m sau")
            adjusted_time = (suggested_time + timedelta(days=1)).replace(hour=9, minute=0)
        if self.lunch_time[0] <= hour < self.lunch_time[1]:
            warnings.append("‚ö†Ô∏è Tr√πng gi·ªù ƒÉn tr∆∞a, g·ª£i √Ω ƒëi·ªÅu ch·ªânh v·ªÅ 13h")
            adjusted_time = suggested_time.replace(hour=13, minute=0)
        return adjusted_time, warnings

    def _generate_alternative_times(self, base_time: datetime, task_info: Dict) -> List[str]:
        alternatives = []
        best_start, best_end = task_info.get('best_time', (9, 17))
        for hour in [best_start, (best_start + best_end) // 2, best_end - 1]:
            alt_time = base_time.replace(hour=hour, minute=0)
            if alt_time > self.current_time:
                alternatives.append(alt_time.strftime('%d/%m/%Y %H:%M'))
        next_day = base_time + timedelta(days=1)
        alternatives.append(next_day.replace(hour=9, minute=0).strftime('%d/%m/%Y %H:%M'))
        return alternatives[:3]

    def advise_schedule(self, user_input: str) -> Dict[str, Union[str, List[str]]]:
        try:
            suggested_time = self._extract_time(user_input)
            task_info = self._categorize_task(user_input)
            priority = self._analyze_priority(user_input)
            if suggested_time:
                adjusted_time, warnings = self._validate_business_time(suggested_time)
                alternatives = self._generate_alternative_times(adjusted_time, task_info)
                main_suggestion = f"üìÖ **ƒê·ªÅ xu·∫•t ch√≠nh:** {adjusted_time.strftime('%A, %d/%m/%Y l√∫c %H:%M') }"
                duration_info = f"‚è±Ô∏è **Th·ªùi l∆∞·ª£ng g·ª£i √Ω:** {task_info['duration']} ph√∫t"
                priority_info = f"üéØ **M·ª©c ƒë·ªô ∆∞u ti√™n:** {priority}"
                response = {
                    'main_suggestion': main_suggestion,
                    'duration': duration_info,
                    'priority': priority_info,
                    'warnings': warnings,
                    'alternatives': alternatives,
                    'status': 'success'
                }
            else:
                response = {
                    'main_suggestion': "‚ùå **Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c th·ªùi gian c·ª• th·ªÉ**",
                    'duration': f"‚è±Ô∏è **Th·ªùi l∆∞·ª£ng g·ª£i √Ω:** {task_info['duration']} ph√∫t",
                    'priority': f"üéØ **M·ª©c ƒë·ªô ∆∞u ti√™n:** {priority}",
                    'suggestions': [
                        "H√£y th·ª≠ c√°c c√°ch di·ªÖn ƒë·∫°t nh∆∞:",
                        "‚Ä¢ 'ng√†y mai l√∫c 9h'",
                        "‚Ä¢ 'th·ª© 3 tu·∫ßn sau'",
                        "‚Ä¢ 'chi·ªÅu th·ª© 5'",
                        "‚Ä¢ '15/8 l√∫c 14h'"
                    ],
                    'status': 'need_more_info'
                }
        except Exception as e:
            response = {
                'main_suggestion': "‚ùå **C√≥ l·ªói x·∫£y ra khi ph√¢n t√≠ch**",
                'error': str(e),
                'status': 'error'
            }
        return response

    def format_response(self, response: Dict) -> str:
        if response['status'] == 'success':
            result = f"{response['main_suggestion']}\n"
            result += f"{response['duration']}\n"
            result += f"{response['priority']}\n"
            if response.get('warnings'):
                result += "\n‚ö†Ô∏è **L∆∞u √Ω:**\n"
                for warning in response['warnings']:
                    result += f"  {warning}\n"
            if response.get('alternatives'):
                result += "\nüîÑ **Th·ªùi gian thay th·∫ø:**\n"
                for alt in response['alternatives']:
                    result += f"  ‚Ä¢ {alt}\n"
        elif response['status'] == 'need_more_info':
            result = f"{response['main_suggestion']}\n"
            result += f"{response['duration']}\n"
            result += f"{response['priority']}\n\n"
            if response.get('suggestions'):
                for suggestion in response['suggestions']:
                    result += f"{suggestion}\n"
        else:
            result = f"{response['main_suggestion']}\n"
            result += f"Chi ti·∫øt l·ªói: {response.get('error', 'Kh√¥ng x√°c ƒë·ªãnh')}"
        return result