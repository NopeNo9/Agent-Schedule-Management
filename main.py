
import os
import google.generativeai as genai
from core.ScheduleAdvisor import ScheduleAdvisor
from core.ExecuteSchedule import ExecuteSchedule
from dotenv import load_dotenv

load_dotenv()

GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
if not GEMINI_API_KEY:
    raise ValueError('Vui l√≤ng thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng GEMINI_API_KEY v·ªõi API key c·ªßa Gemini.')

# Kh·ªüi t·∫°o Gemini
genai.configure(api_key=GEMINI_API_KEY)

# Function calling
functions = [
    {
        "name": "advise_schedule",
        "description": "T∆∞ v·∫•n l·∫≠p l·ªãch cho ng∆∞·ªùi d√πng d·ª±a tr√™n th·ªùi gian v√† lo·∫°i c√¥ng vi·ªác ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p.",
        "parameters": {
            "type": "object",
            "properties": {
                "user_request": {
                    "type": "string",
                    "description": "Y√™u c·∫ßu l·∫≠p l·ªãch c·ªßa ng∆∞·ªùi d√πng"
                }
            },
            "required": ["user_request"]
        }
    },
    {
        "name": "smart_add_schedule",
        "description": "Th√™m l·ªãch th√¥ng minh - t·ª± ƒë·ªông ph√¢n t√≠ch th·ªùi gian t·ª´ ng√¥n ng·ªØ t·ª± nhi√™n r·ªìi th√™m v√†o h·ªá th·ªëng",
        "parameters": {
            "type": "object",
            "properties": {
                "user_request": {
                    "type": "string",
                    "description": "Y√™u c·∫ßu th√™m l·ªãch b·∫±ng ng√¥n ng·ªØ t·ª± nhi√™n (VD: 'th√™m l·ªãch kh√°m rƒÉng v√†o 7h t·ªëi th·ª© 7 tu·∫ßn n√†y, th·ªùi gian 2 ti·∫øng')"
                }
            },
            "required": ["user_request"]
        }
    },
    {
        "name": "get_schedules",
        "description": "L·∫•y danh s√°ch t·∫•t c·∫£ l·ªãch ƒë√£ l∆∞u.",
        "parameters": {
            "type": "object",
            "properties": {},
            "required": []
        }
    },
    {
        "name": "update_schedule",
        "description": "C·∫≠p nh·∫≠t th√¥ng tin l·ªãch ƒë√£ c√≥.",
        "parameters": {
            "type": "object",
            "properties": {
                "schedule_id": {
                    "type": "integer",
                    "description": "ID c·ªßa l·ªãch c·∫ßn c·∫≠p nh·∫≠t"
                },
                "title": {
                    "type": "string",
                    "description": "Ti√™u ƒë·ªÅ m·ªõi (t√πy ch·ªçn)"
                },
                "description": {
                    "type": "string",
                    "description": "M√¥ t·∫£ m·ªõi (t√πy ch·ªçn)"
                },
                "start_time": {
                    "type": "string", 
                    "description": "Th·ªùi gian b·∫Øt ƒë·∫ßu m·ªõi (t√πy ch·ªçn)"
                },
                "end_time": {
                    "type": "string",
                    "description": "Th·ªùi gian k·∫øt th√∫c m·ªõi (t√πy ch·ªçn)"
                }
            },
            "required": ["schedule_id"]
        }
    },
    {
        "name": "delete_schedule",
        "description": "X√≥a l·ªãch kh·ªèi h·ªá th·ªëng.",
        "parameters": {
            "type": "object",
            "properties": {
                "schedule_id": {
                    "type": "integer",
                    "description": "ID c·ªßa l·ªãch c·∫ßn x√≥a"
                }
            },
            "required": ["schedule_id"]
        }
    }
]

def handle_function_call(call, user_input):
    name = call.name
    args = call.args if hasattr(call, 'args') else {}
    advisor = ScheduleAdvisor()
    executor = ExecuteSchedule()
    
    try:
        if name == "advise_schedule":
            user_request = args.get('user_request', user_input)
            result = advisor.advise_schedule(user_request)
            return advisor.format_response(result)
            
        elif name == "smart_add_schedule":
            user_request = args.get('user_request', user_input)
            
            print(f"üîç DEBUG smart_add_schedule:")
            print(f"   user_request: {user_request}")
            
            # 1. D√πng ScheduleAdvisor ƒë·ªÉ parse th·ªùi gian
            advisor_result = advisor.advise_schedule(user_request)
            
            if 'suggested_time' in advisor_result:
                suggested_time = advisor_result['suggested_time']
                print(f"   ‚úÖ Parsed time: {suggested_time}")
                
                # 2. Extract title v√† description
                import re
                title_match = re.search(r'(kh√°m rƒÉng|h·ªçc|h·ªçp|ƒëi|mua|g·∫∑p|l√†m)', user_request, re.IGNORECASE)
                title = title_match.group(0) if title_match else "L·ªãch m·ªõi"
                
                # 3. Extract duration
                duration_match = re.search(r'(\d+)\s*(ti·∫øng|gi·ªù|ph√∫t)', user_request)
                if duration_match:
                    duration_num = int(duration_match.group(1))
                    duration_unit = duration_match.group(2)
                    if 'ti·∫øng' in duration_unit or 'gi·ªù' in duration_unit:
                        end_time = suggested_time.replace(hour=suggested_time.hour + duration_num)
                    else:  # ph√∫t
                        end_time = suggested_time.replace(minute=suggested_time.minute + duration_num)
                else:
                    end_time = suggested_time.replace(hour=suggested_time.hour + 1)  # default 1h
                
                # 4. Format th·ªùi gian
                start_time_str = suggested_time.strftime('%Y-%m-%dT%H:%M:%S')
                end_time_str = end_time.strftime('%Y-%m-%dT%H:%M:%S')
                
                print(f"   ‚úÖ Final times: {start_time_str} - {end_time_str}")
                
                # 5. Th√™m v√†o database
                result = executor.add_schedule(title, title, start_time_str, end_time_str)
                return result
            else:
                return "‚ùå Kh√¥ng th·ªÉ ph√¢n t√≠ch th·ªùi gian t·ª´ y√™u c·∫ßu c·ªßa b·∫°n."
            
        elif name == "get_schedules":
            schedules = executor.get_schedules()
            if not schedules:
                return "üìã Hi·ªán t·∫°i ch∆∞a c√≥ l·ªãch n√†o ƒë∆∞·ª£c l∆∞u."
            
            result = "üìã **Danh s√°ch l·ªãch:**\n"
            for schedule in schedules:
                result += f"ID: {schedule[0]} | {schedule[1]} | {schedule[3]} - {schedule[4]}\n"
                result += f"   M√¥ t·∫£: {schedule[2]}\n\n"
            return result
            
        elif name == "update_schedule":
            schedule_id = args.get('schedule_id')
            title = args.get('title')
            description = args.get('description')
            start_time = args.get('start_time')
            end_time = args.get('end_time')
            
            if not schedule_id:
                return "‚ùå Thi·∫øu ID l·ªãch c·∫ßn c·∫≠p nh·∫≠t."
            
            result = executor.update_schedule(schedule_id, title, description, start_time, end_time)
            return result
            
        elif name == "delete_schedule":
            schedule_id = args.get('schedule_id')
            
            if not schedule_id:
                return "‚ùå Thi·∫øu ID l·ªãch c·∫ßn x√≥a."
            
            result = executor.delete_schedule(schedule_id)
            return result         
        else:
            return "‚ùå Ch·ª©c nƒÉng kh√¥ng h·ªó tr·ª£."
            
    except Exception as e:
        return f"‚ùå L·ªói khi th·ª±c hi·ªán: {str(e)}"
    finally:
        executor.close()

def process_user_input(user_input):
    print("üîÑ ƒêang x·ª≠ l√Ω y√™u c·∫ßu...")
    
    try:
        model = genai.GenerativeModel('gemini-1.5-flash')

        system_prompt = f"""QUAN TR·ªåNG: H√¥m nay l√† 2025-08-06 (Th·ª© 4).

Ph√¢n t√≠ch y√™u c·∫ßu v√† g·ªçi function ph√π h·ª£p:
- N·∫øu user mu·ªën T∆Ø V·∫§N/KI·ªÇM TRA th·ªùi gian ‚Üí advise_schedule
- N·∫øu user mu·ªën TH√äM L·ªäCH v·ªõi th·ªùi gian c·ª• th·ªÉ ‚Üí add_schedule 
- N·∫øu user mu·ªën TH√äM L·ªäCH nh∆∞ng ch∆∞a r√µ th·ªùi gian ‚Üí advise_schedule TR∆Ø·ªöC
- Xem danh s√°ch l·ªãch ‚Üí get_schedules
- C·∫≠p nh·∫≠t l·ªãch ‚Üí update_schedule (c·∫ßn schedule_id)
- X√≥a l·ªãch ‚Üí delete_schedule (c·∫ßn schedule_id)

L∆ØU √ù: 
- Th·ª© 7 tu·∫ßn n√†y = 2025-08-09
- Ch·ªß nh·∫≠t tu·∫ßn n√†y = 2025-08-10
- KH√îNG t·ª± t·∫°o th·ªùi gian nƒÉm 2024!
- ∆Øu ti√™n d√πng smart_add_schedule cho y√™u c·∫ßu th√™m l·ªãch

Y√™u c·∫ßu: {user_input}"""
        
        generation_config = genai.types.GenerationConfig(
            temperature=0.1, 
            max_output_tokens=100  
        )
        
        response = model.generate_content(
            system_prompt,
            tools=[{"function_declarations": functions}],
            tool_config={"function_calling_config": {"mode": "ANY"}},
            generation_config=generation_config
        )
        
        if hasattr(response.candidates[0].content.parts[0], 'function_call'):
            function_call = response.candidates[0].content.parts[0].function_call
            print(f"üîç DEBUG Gemini function call:")
            print(f"   Function: {function_call.name}")
            print(f"   Args: {dict(function_call.args) if hasattr(function_call, 'args') else 'No args'}")
            function_response = handle_function_call(function_call, user_input)
            print("ü§ñ Gemini AI Response:")
            print(function_response)
            return function_response
        else:
            print("üìã Gemini kh√¥ng g·ªçi function, s·ª≠ d·ª•ng logic tr·ª±c ti·∫øp...")
            # Fallback: s·ª≠ d·ª•ng logic tr·ª±c ti·∫øp
            advisor = ScheduleAdvisor()
            result = advisor.advise_schedule(user_input)
            formatted_response = advisor.format_response(result)
            print("ü§ñ Direct Response:")
            print(formatted_response)
            return formatted_response
            
    except Exception as e:
        print(f"‚ùå L·ªói Gemini API: {e}")

if __name__ == "__main__":
    print("=== AI Agent L·∫≠p l·ªãch ===")
    
    while True:
        user_input = input("\nüìù Nh·∫≠p y√™u c·∫ßu c·ªßa b·∫°n (ho·∫∑c 'exit' ho·∫∑c 'quit' ƒë·ªÉ tho√°t): ")
        if user_input.lower() in ["exit", "quit", "tho√°t"]:
            print("üëã T·∫°m bi·ªát!")
            break
        process_user_input(user_input)
